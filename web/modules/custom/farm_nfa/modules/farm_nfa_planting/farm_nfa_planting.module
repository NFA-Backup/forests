<?php

/**
 * @file
 * Provides alters and hooks for the farm nfa module.
 */

use Drupal\asset\Entity\AssetInterface;
use Drupal\log\Entity\LogInterface;

/**
 * Implements hook_entity_type_alter().
 */
function farm_nfa_planting_entity_type_alter(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  if (isset($entity_types['plan'])) {
    $entity_types['plan']->setLinkTemplate('planting', '/plan/{plan}/planting');
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave() on behalf of assets (forest).
 */
function farm_nfa_planting_asset_presave(AssetInterface $asset) {
  if (!$asset->isNew()) {
    return;
  }
  // Only for forests.
  if ($asset->bundle() !== 'forest') {
    return;
  }

  // When saving a new forest (by creating a planting log), it adds the forest
  // type automatically based on the plan type.
  if ($asset->hasField('forest_type') && $asset->get('forest_type')->isEmpty()) {
    if ($plan = \Drupal::service('farm_nfa.referer_plan_loader')->load()) {
      switch ($plan->bundle()) {
        case 'plantation':
          $asset->set('forest_type', 'plantation');
          break;
        case 'natural':
          $asset->set('forest_type', 'natural');
          break;
        default:
          // Default to nothing!
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave() on behalf of logs (plantings)
 */
function farm_nfa_planting_log_presave(LogInterface $log) {
  if (!$log->isNew()) {
    return;
  }
  // Only for forests.
  if ($log->bundle() !== 'planting') {
    return;
  }

  // Planting logs always are movements ones.
  // @see https://github.com/mstenta/farm_nfa/issues/92#issuecomment-956176947
  $log->set('is_movement', TRUE);
}

/**
 * Implements hook_ENTITY_TYPE_delete() on behalf of log entities.
 */
function farm_nfa_planting_log_delete(LogInterface $log) {
  // Only for plantings.
  if ($log->bundle() !== 'planting') {
    return;
  }

  if ($log->hasField('asset') && !$log->get('asset')->isEmpty()) {
    /** @var \Drupal\asset\Entity\AssetInterface[] $assets */
    $assets = $log->get('asset')->referencedEntities();
    // It should be cardinality 1, but let's be defensive.
    foreach ($assets as $asset) {
      // Recreating the query every time to avoid issues.
      $query = \Drupal::entityTypeManager()->getStorage('log')->getQuery();
      $query->condition('asset', $asset->id());
      $query->accessCheck(TRUE);
      $results = $query->count()->execute();
      if ($results <= 1) {
        $asset->delete();
        \Drupal::messenger()->addStatus(t('Asset %title with %id deleted as it was associated with the log.', ['%title' => $asset->label(), '%id' => $asset->id()]));
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function farm_nfa_planting_preprocess_menu_local_task(&$variables) {
  /** @var \Drupal\Core\Url $url */
  $url = $variables['link']['#url'];
  if ($url->getRouteName() == 'entity.plan.planting') {
    if ($plan = \Drupal::routeMatch()->getParameter('plan')) {
      if ($plan->bundle() == 'natural') {
        // @TODO can be this done on the yml file with the class property?
        $variables['link']['#title'] = t('Enrichment');
      }
    }
  }
}
