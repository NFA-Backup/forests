<?php

use Drupal\log\Entity\LogType;
use Drush\Drush;
use Drupal\taxonomy\Entity\Term;

/**
 * @file
 * Install, update and uninstall functions for the farm_nfa module.
 */

/*
 * Uninstall farm_forest_plan and farm_input modules to remove toolbar links.
 */
function farm_nfa_remove_toolbar_links_helper() {
  // Delete forest plan and input log entities before uninstalling the modules.
  $plan_storage = \Drupal::service('entity_type.manager')->getStorage('plan');
  $plan_results = $plan_storage->getQuery()
    ->condition('type', 'forest')
    ->accessCheck(FALSE)
    ->execute();
  if ($plan_results) {
    $plans = $plan_storage->loadMultiple($plan_results);
    $plan_storage->delete($plans);
  }

  $log_storage = \Drupal::service('entity_type.manager')->getStorage('log');
  $log_results = $log_storage->getQuery()
    ->condition('type', 'input')
    ->accessCheck(FALSE)
    ->execute();
  if ($log_results) {
    $logs = $log_storage->loadMultiple($log_results);
    $log_storage->delete($logs);
  }

  // Uninstall the following modules to hide its toolbar menu links.
  \Drupal::service('module_installer')->uninstall(
    ['farm_forest_plan', 'farm_input', 'farm_update']
  );
}

/**
 * Implements hook_install().
 */
function farm_nfa_install(){

  // Rename "Land" assets to "Land (Admin)".
  \Drupal::configFactory()->getEditable('asset.type.land')->set('label', 'Land (Admin)')->save();

  farm_nfa_remove_toolbar_links_helper();
  \Drupal::service('module_installer')->uninstall(['farm_ui_action']);
}

/**
 * Implements hook_update_N().
 *
 * Uninstall modules farm_forest_plan and farm_input.
 */
function farm_nfa_update_9001(&$sandbox) {
  farm_nfa_remove_toolbar_links_helper();
}

/**
 * Implements hook_update_N().
 *
 * Uninstall module farm_ui_action module.
 */
function farm_nfa_update_9002(&$sandbox) {
  \Drupal::service('module_installer')->uninstall(['farm_ui_action']);
}

/**
 * Implements hook_update_N().
 *
 * Update the default workflow for the farmOS core modules.
 */
function farm_nfa_update_9003(&$sandbox) {
  foreach (['activity', 'harvest', 'observation'] as $log_type_id) {
    $log_type = LogType::load($log_type_id);
    $log_type->setWorkflowId('farm_nfa_log_default');
    $log_type->save();
  }
}

/**
 * Implements hook_update_N().
 *
 * Reinstall module farm_ui_action module.
 */
function farm_nfa_update_9004(&$sandbox) {
  \Drupal::service('module_installer')->install(['farm_ui_action']);
}

/**
 * Implements hook_update_N().
 *
 * Install module farm_nfa_migrate module.
 */
function farm_nfa_update_9005(&$sandbox) {
  \Drupal::service('module_installer')->install(['farm_nfa_migrate']);
}

/**
 * Implements hook_update_N().
 *
 * Install module farm_nfa_planting module.
 */
function farm_nfa_update_9006(&$sandbox) {
  \Drupal::service('module_installer')->install(['farm_nfa_planting']);
}

/**
 * Implements hook_update_N().
 *
 * Change the forest third party settings so it is not location or fixed.
 */
function farm_nfa_update_9007(&$sandbox) {
  // We're setting location and fixed to FALSE so we force the forest asset
  // location to use the log compartment in a way they're related.
  // In this case, we want forests to be movable assets, like the Ents in LOTR.
  $forest_type = \Drupal::entityTypeManager()->getStorage('asset_type')->load('forest');
  $forest_type->setThirdPartySetting('farm_location', 'is_location', FALSE);
  $forest_type->setThirdPartySetting('farm_location', 'is_fixed', FALSE);
  $forest_type->save();
}

/**
 * Implements hook_update_N().
 *
 * Enable log asset module.
 */
function farm_nfa_update_9008(&$sandbox) {
  \Drupal::service('module_installer')->install(['farm_log_asset']);
}

/**
 * Implements hook_update_N().
 *
 * Remove misconfigured fields
 */
function farm_nfa_update_9010(&$sandbox) {
  $fields_by_entity = [
    'asset' => [
      'variety',
      'species',
      'detailed_vegetation',
      'predominant_vegetation',
      'current_purpose',
      'field_boundary_opening_history',
      'field_boundary_plan_details',
    ],
    'media' => [
      'date',
    ],
  ];
  $bundle_field_maps = Drupal::keyValue('entity.definitions.bundle_field_map');
  foreach ($fields_by_entity as $entity_type_id => $field_names) {
    $data = $bundle_field_maps->get($entity_type_id);
    foreach($field_names as $field_name) {
      unset($data[$field_name]);
    }
    $bundle_field_maps->set($entity_type_id, $data);
  }
}

/**
 * Implements hook_update_N().
 *
 * Uninstall Devel Entity Updates and Devel
 */
function farm_nfa_update_9011(&$sandbox) {
  \Drupal::service('module_installer')->uninstall(['devel_entity_updates']);
  \Drupal::service('module_installer')->uninstall(['devel']);
}

/**
 * Disable farmOS Migrate modules.
 */
function farm_nfa_update_9012(&$sandbox) {
  \Drupal::service('module_installer')->uninstall(['farm_migrate']);
  \Drupal::service('module_installer')->uninstall(['farm_nfa_migrate']);
}

/**
 * Enable Farm NFA Config Update module.
 */
function farm_nfa_update_9013(&$sandbox) {
  \Drupal::service('module_installer')->install(['farm_nfa_config_update']);
}

/**
 * Import overrides of farmOS views.
 */
function farm_nfa_update_9014(&$sandbox) {
  // Load the config items to be imported. Config yamls are placed in a folder
  // named after the update hook.
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9014";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * Revert to farmOS default configuration.
 */
function farm_nfa_update_9015(&$sandbox) {
  // Config items to be reverted.
  $items = [
    ['type' => 'flag', 'name' => 'monitor'],
    ['type' => 'flag', 'name' => 'priority'],
    ['type' => 'flag', 'name' => 'review'],
    ['type' => 'system.simple', 'name' => 'gin_lb.settings'],
    ['type' => 'quantity_type', 'name' => 'standard'],
    ['type' => 'system.simple', 'name' => 'update.settings'],
    ['type' => 'view', 'name' => 'asset_admin'],
    ['type' => 'view', 'name' => 'farm_asset_reference'],
    ['type' => 'view', 'name' => 'farm_inventory'],
    ['type' => 'view', 'name' => 'farm_location_reference'],
    ['type' => 'view', 'name' => 'farm_log'],
    ['type' => 'view', 'name' => 'farm_people'],
    ['type' => 'view', 'name' => 'plan_admin'],
    ['type' => 'view', 'name' => 'farm_quantity'],
    ['type' => 'system.simple', 'name' => 'system.date'],
  ];

  $config_update = \Drupal::service('config_update.config_update');
  foreach ($items as $item) {
    $config_update->revert($item['type'], $item['name']);
  }
}

/**
 * Enable NFA Range and Sector modules.
 */
/*function farm_nfa_update_9016(&$sandbox) {
\Drupal::service('module_installer')->install(['farm_nfa_range']);
\Drupal::service('module_installer')->install(['farm_nfa_sector']);
}*/

/**
 * Update overridden Farm Assets view with changes from farmOS 2.1.0.
 */
function farm_nfa_update_9017(&$sandbox) {
  // Load the config items to be imported. Config yamls are placed in a folder
  // named after the update hook.
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9017";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * Enable NFA Gin Forests theme and disable old theme.
 */
function farm_nfa_update_9018(&$sandbox) {
  $new_theme = 'nfa_gin_forests';
  \Drupal::service('theme_installer')->install([$new_theme]);
  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('default', $new_theme)
    ->save();
  //\Drupal::service('theme_installer')->uninstall(['farm_gin']);
}

/**
 * Enable Environment Indicator modules.
 */
function farm_nfa_update_9019(&$sandbox) {
  \Drupal::service('module_installer')->install(['environment_indicator']);
  \Drupal::service('module_installer')->install(['environment_indicator_ui']);

  // Refresh config cache to avoid dependency errors when importing config that
  // depends on environment_indicator and environment_indicator_ui.
  \Drupal::cache('config')->deleteAll();

  // Load the config items to be imported. Config yamls are placed in a folder
  // named after the update hook.
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9019";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * Enable NFA Landing page module.
 */
function farm_nfa_update_9020(&$sandbox) {
  \Drupal::service('module_installer')->install(['nfa_landing']);
  \Drupal::service('module_installer')->install(['r4032login']);

  // Refresh config cache to avoid dependency errors when importing config that
  // depends on environment_indicator and environment_indicator_ui.
  \Drupal::cache('config')->deleteAll();

  // Load the config items to be imported. Config yamls are placed in a folder
  // named after the update hook.
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9020";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * Enable dependent fields module.
 */
function farm_nfa_update_9021(&$sandbox) {
  \Drupal::service('module_installer')->install(['dependent_fields']);
}

/**
 * Import overrides for forest taxonomy terms and forest asset type forms.
 */
function farm_nfa_update_9022(&$sandbox) {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9022";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * Uninstall NFA Range and Sector modules.
 */
/*function farm_nfa_update_9023(&$sandbox) {
\Drupal::service('module_installer')->uninstall(['farm_nfa_range']);
\Drupal::service('module_installer')->uninstall(['farm_nfa_sector']);
}*/

/**
 * Update Farm Assets view after reorganising menus.
 */
function farm_nfa_update_9024(&$sandbox) {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9024";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * Enable daterangepicker, jquery ui button and jquery ui menu module.
 */
function farm_nfa_update_9025(&$sandbox) {
  \Drupal::service('module_installer')->install(['daterangepicker']);
  \Drupal::service('module_installer')->install(['jquery_ui_button']);
  \Drupal::service('module_installer')->install(['jquery_ui_menu']);
}

/**
 * Update Farm Assets view range and sector displays.
 */
function farm_nfa_update_9026(&$sandbox) {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9026";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * Add layer switcher sidebar auto open behavior.
 */
function farm_nfa_update_9027(&$sandbox) {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9027";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * Add asset entity geojson view.
 */
function farm_nfa_update_9028(&$sandbox) {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9028";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * Enable Symfony mailer module.
 */
function farm_nfa_update_9029(&$sandbox) {
  \Drupal::service('module_installer')->install(['symfony_mailer']);
}

/**
 * Update Symfony mailer configuration.
 */
function farm_nfa_update_9030(&$sandbox) {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9030";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * Enable field group add ctools modules.
 */
function farm_nfa_update_9031(&$sandbox) {
  \Drupal::service('module_installer')->install(['field_group']);
  \Drupal::service('module_installer')->install(['ctools']);
}

/**
 * Update CFR view and form display configuration.
 */
function farm_nfa_update_9032(&$sandbox) {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9032";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * Add CFR plotting to ranges map for main and gfw tab.
 */
function farm_nfa_update_9033(&$sandbox) {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9033";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * Prepare core modules for farmOS 3.
 */
function farm_nfa_update_9034(&$sandbox) {
  \Drupal::service('module_installer')->install(['ckeditor5']);
  \Drupal::service('module_installer')->uninstall(['hal']);
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9034";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
  \Drupal::service('module_installer')->uninstall(['ckeditor']);
}

/**
 * Fix mismatched entity error for Consumer client id field.
 */
function farm_nfa_update_9035(&$sandbox) {
  $manager = \Drupal::entityDefinitionUpdateManager();

  if ($field = $manager->getFieldStorageDefinition('client_id', 'consumer')) {
    $manager->updateFieldStorageDefinition($field);
  }
}

/**
 * Add new FMA plan fields.
 */
function farm_nfa_update_9036(&$sandbox) {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9036";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * Add collapsible wrapper to program fields.
 */
function farm_nfa_update_9037(&$sandbox) {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9037";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * Move CFR fields to Plan.
 */
function farm_nfa_update_9038(&$sandbox) {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9038";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * Reorganise field groups.
 */
function farm_nfa_update_9039(&$sandbox) {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9039";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * Show CFR physical details fields on plan.
 */
function farm_nfa_update_9040(&$sandbox) {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9040";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * Show more CFR fields on plan.
 */
function farm_nfa_update_9041(&$sandbox) {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9041";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * Config updates after upgrade to FarmOS 3.1.1.
 */
function farm_nfa_update_9042(&$sandbox) {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9042";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * Display more CFR level fields on plan.
 */
function farm_nfa_update_9043(&$sandbox) {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9043";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * More Plan and CFR field adjustments.
 */
function farm_nfa_update_9044(&$sandbox) {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9044";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * More view mode adjustments.
 */
function farm_nfa_update_9045(&$sandbox) {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9045";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * Add task fields to activity/management log entity.
 */
function farm_nfa_update_9046(&$sandbox) {
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9046";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * Refresh the natural forest plan type field configuration.
 */
function farm_nfa_update_9047(&$sandbox) {
  farm_nfa_update_helper(9047);
}

/**
 * Change cardinality of CFR parent field.
 */
function farm_nfa_update_9048(&$sandbox) {
  \Drupal::service('module_installer')->install(['limited_field_widgets']);
  farm_nfa_update_helper(9048);
}

/**
 * Fix asset children geojson view.
 */
function farm_nfa_update_9049(&$sandbox) {
  farm_nfa_update_helper(9049);
}

/**
 * Delete the forest plantation plan type.
 */
function farm_nfa_update_9050(&$sandbox) {
  $planIds = \Drupal::entityQuery('plan')
    ->condition('type', 'plantation')
    ->accessCheck(FALSE)
    ->execute();

  $controller = \Drupal::entityTypeManager()->getStorage('plan');
  $plans = $controller->loadMultiple($planIds);
  $controller->delete($plans);
  $config_names = ['plan.type.plantation', 'core.entity_form_display.plan.plantation.default', 'core.entity_view_display.plan.plantation.default'];
  foreach ($config_names as $config_name) {
    $config = \Drupal::configFactory()->getEditable($config_name);
    if ($config) {
      $config->delete();
    }
  }
  \Drupal::service('module_installer')->uninstall(
    ['farm_nfa_plantation_forest']
  );
}

/**
 * Update management tasks config.
 */
function farm_nfa_update_9051(&$sandbox) {
  farm_nfa_update_helper(9051);
}

/**
 * Installed the Typed Entity module.
 */
function farm_nfa_update_9052(&$sandbox) {
  \Drupal::service('module_installer')->install(['typed_entity']);
}

/**
 * Import FarmOS update config changes.
 */
function farm_nfa_update_9053(&$sandbox) {
  farm_nfa_update_helper(9053);
}

/**
 * Add Subactivity field formatter.
 */
function farm_nfa_update_9054(&$sandbox) {
  farm_nfa_update_helper(9054);
}

/**
 * Fix plan logs view.
 */
function farm_nfa_update_9055(&$sandbox) {
  farm_nfa_update_helper(9055);
}
